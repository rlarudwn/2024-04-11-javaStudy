/*
		연산자
		연산시 주의줌
			1) 데이터형
			2) 프로그램에 필요한 데이터형이 무엇인지 확인
			단항연산자
				=> 증감연산자 (++, --)
					=> 변수값 자체가 변경
					=> 반복문에서 주로 사용
					=> 웹 (데이터베이스 연동)
				=> 부정연산자 (!)	=> boolean으로만 사용 ㄱ나ㅡㅇ
								=> true -> false / false -> true
								=> 조건문, 반복문 (제어문에서 주로 사용)
								=> 예약일	=> !예약조건
				=> 형변환연산자 ((데이터형))
					형변환 : byte, char, int, long, float, double
					1) 묵시적 형변환	=> 자동 형변환
						작은 데이터형	=> 큰 데이터형
							int i = 'A'	=> 자동 형변환 (char -> int)
					2) 강제 형변환
						큰 데이터형		=> 작은 데이터형
							int i = (int)10.5;
			이항연산자	=> 연산대상 (피연산자) 2개	
				=> 산술연산자 (+, -, *, /, %)
					+
						=> 일반 산술 (덧셈)
						=> 문자열 결합	=>  데이터 저장, 크롤링
					/
						=> 0으로 나눌 수 없다 : 조건, 예외처리
					%	
						=> 배수구하기, 조건
						왼쪽 숫자의 부호가 남는다
				=> 비교연산자 (==, !=, <, >, <=, >=)
					==	: 같다 (JavaScript : ===, Oracle : =)
					!=	: 같지 않다
					<	: 작다
					>	: 크다
					<=	: 작거나 같다
					>=	: 크거나 같다
						=> 문자 / 숫자 만 비교 가능
						=> 문자열은 equals(), compare() 
				=> 논리연산자 (&&, ||)
					&&	=> (조건) && (조건)	=> true / false
						=> 앞 조건이 false일 때 뒤 조건 연산 X
					||	=> (조건) || (조건)	=> true / false
						=> 앞 조건이 true일 때 뒤 조건 연산 X 
					=> Java는 true / false
					=> C / C++ / python / JavaScript	=> 숫자
				=> 대입연산자 (=, +=, -=)
					=
						int a = 10
						a = 10 + 10
						=> 계산된 결과를 a에 저잡(대입)
			삼항연산자
				=> (조건)?값1:값2	=> if ~else	=> 소스가 긴 경우 주로 사용 (HTML)
					(조건) true	=> 값1
					(조건) false	=> 값2
			
		프로그램
			1) 기본 문법	=> 변수 / 데이터형 / 연산자 / 제어문
			2) 묶는 연삽	=> 데이터 묶음 (배열 / 클래스) / 명령문 묶음 (메소드)
			3) 재사용을 중심
 */

package chapter02_3;

public class 삼항연산자 {

	public static void main(String[] args) {
		
		int num = (int)(Math.random() * 100) + 1;
		System.out.println(num);
		System.out.println(num%2==0?"짝수":"홀수");


	}

}
