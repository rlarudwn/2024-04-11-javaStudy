/*
 		'A'	=>	65	1000001
 		=> 프로그램 언어	=> 컴파일방식 이용
 		C/C++, C#, Java
 		
 	인터프리터 방식: 한줄씩 번역해서 처리
 	HTML, CSS
 	=> 컴파일 / 인터프리터 동시에 사용	=> 보안 (소스검증)
 	============================================
 	| 제임스 고슬링 => 자바언어는 절대 보안 노출되지 않는다
 	
 	자바소스 (.java)
 	   |
 	  JVM	=> .class 번역
 	   |
=================================
|		|		|		|		|
리눅스	유닉스	솔라리스	Mac		Window		=> 동일한 실행 결과

	java => class
	
	==> 실행 과정
	A.java 파일 만들기
		|	javac
	A.class	생성
		|	Java
	실행 결과
	
	6page 개발환경 구축
	1) JDK	=>	17버전	=>	jdk17.0.2
		* 높은 버전에서는 실행 가능	=> 낮은 버전에서는 실행 불가
		* 실무 : jdk1.8 (SUN의 마지막 버전)	=> 호환성이 좋다
		* Spring-Boot : 17이상
		  SpringFramework : 14이하 ***
		* 오픈소스를 이용 => 호환성 => 단점
	2) 환경설정
		=> classpath 	: 라이브러리 읽기	=> .;c:\jdk-17.0.2\lib
		=> path			: 실행파일 등록		=> c:\jdk-17.0.2\bin
	3) 11page => 편집기
					|eclipse	=>	eclipse.org	=>	최신
						=> Back-End
					|인텔리J
						=> Fullstack
			= 프로젝트 폴더만들기
			= src에 자바 클래스 생성
				주의점)
					1. 파일명과 클래스명이 동일
					2. 대소문자 구분
					3. 명령문(CPU)이 끝나면 반드시 ';'
					4. 클래스 영문외에 한글 사용 가능	=> 리눅스나 다른 운영체제에서 한글 인식이 잘 안될때 있음 (영문 권장)
				
				약속 사항
					1) 	클래스명은 대문자로 시작
						MainClass
					2) 	변수: 소문자 시작
						id, password
					3) 	상수: 모든 단어 대문자
						ID, PASSWORD
					4)	메소드: 소문자 시작
					
		===============================================
		모든 자바파일 실행시에는 반드시 main()
							=========== 실행 시작점 / 종료점
		주석 :	ctrl + shift + /
				ctrl + shift + \
				=================
		
		자바의 구성요소
		class ClassName{
			public static void main(String[] arg){ => 프로그램 시작점
			
			}
		}
		객체 지향 프로그램 (5장)
		=============class=============
		
		===============================
			=> 변수
		===============================
			=> 생성자
		===============================
			=> 메소드
		===============================
		
		===============================
 */

package chapter01;

public class MainClass {

	public static void main(String[] args) {
		System.out.println('A');
		System.out.println((int)'ㄱ');
		System.out.println((char)97);

		
	}
	
}
